<?xml version="1.0" encoding="UTF-8"?>
<project name="build-lib-scala">

    <!-- This file is imported by the main Ant script. -->

    <!-- Add Proguard tasks (proguard.sourceforge.net) -->
    <property name="proguard.jar" location="${proguard.dir}/lib/proguard.jar" />
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.jar}" />

    <!-- Add Scala tasks (www.scala-lang.org) -->
    <property name="scala-compiler.jar" value="${scala.dir}/lib/scala-compiler.jar" />
    <property name="scala-library.jar" value="${scala.dir}/lib/scala-library.jar" />
    <path id="scala.path">
        <pathelement path="${scala-compiler.jar}" />
        <pathelement path="${scala-library.jar}" />
    </path>
    <taskdef resource="scala/tools/ant/antlib.xml" classpathref="scala.path" />
    <property prefix="scala" resource="compiler.properties" classpathref="scala.path" />
    <property
        name="scalac.banner"
        value="Scala compiler version ${scala.version.number} - http://scala-lang.org" />

    <!-- Input directories -->
    <property name="configs.dir" value="${basedir}/configs" />

    <!-- Intermediate files -->
    <property name="shrinked.jar" location="${out.absolute.dir}/shrinked.jar" />

    <!-- Rules -->

    <resourcecount property="scala.files.count">
        <fileset dir="${source.dir}" includes="**/*.scala" />
    </resourcecount>
    <condition property="myapp.containsScala">
        <not><equals arg1="${scala.files.count}" arg2="0" /></not>
    </condition>

    <uptodate property="do.not.compile" targetfile="${out.dir}/classes.complete">
        <srcfiles dir="${source.dir}" includes="**/*.scala,**/*.java" />
        <srcfiles dir="${resource.dir}" />
    </uptodate>

    <target name="compile-scala" depends="compile"
        description="Compiles project's .scala files into .class files"
        if="myapp.containsScala" unless="do.not.compile">
        <condition property="logging" value="verbose" else="none">
            <istrue value="${verbose}" />
        </condition>
        <echo message="${scalac.banner}" level="info" taskname="scalac" />
        <scalac
            includes="**/*.scala"
            destdir="${out.classes.absolute.dir}"
            bootclasspathref="android.target.classpath"
            logging="${logging}" addparams="${scalac.addparams}">
            <src path="${source.absolute.dir}" />
            <src path="${gen.absolute.dir}" />
            <src refid="android.libraries.src" />
            <classpath>
                <pathelement location="${scala-library.jar}" />
                <!-- include compiled resources -->
                <pathelement location="${out.classes.absolute.dir}" />
                <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
            </classpath>
        </scalac>
        <touch file="${out.dir}/classes.complete" verbose="no"/>
    </target>

    <target name="-pre-shrink-scala">
        <if condition="${build.mode.release}"><then>
            <!-- needed for obfuscate task -->
            <path id="project.libraries.jars">
                <pathelement location="${scala-library.jar}" />
            </path>
        </then><else>
            <condition property="shrink.required"><not>
                <uptodate targetfile="${shrinked.jar}">
                    <srcfiles dir="${source.absolute.dir}" includes="**/*.scala" />
                </uptodate>
            </not></condition>
            <!-- input for dex will be proguard's output -->
            <property name="out.dex.input.absolute.dir" value="${shrinked.jar}" />        
        </else></if>
    </target>

	<target name="-shrink-scala" depends="-pre-shrink-scala"
	        if="shrink.required" unless="do.not.compile"
	        description="Shrink project class files and Scala library into one .jar file">
        <condition property="shrink.mode" value="-release" else="-debug">
           <isset property="build.mode.release" />
        </condition>
        <!-- priority is given to local ProGuard configuration if present -->
        <condition property="template.cfg" value="${configs.dir}/local${shrink.mode}.cfg">
            <available file="${configs.dir}/local${shrink.mode}.cfg" />
        </condition>
        <condition property="template.cfg" value="${configs.dir}/default${shrink.mode}.cfg">
            <available file="${configs.dir}/default${shrink.mode}.cfg" />
        </condition>
        <fail message="Template file '${template.cfg}' not found">
            <condition><not><available file="${template.cfg}" /></not></condition>
        </fail>
        <property name="shrink-proguard.cfg" value="${out.absolute.dir}${file.separator}shrink${shrink.mode}.cfg" />
        <echo message="Generating configuration file ${shrink-proguard.cfg}" />
        <generate-header property="header" />
        <!-- set the compiled project files and Scala library into a single property. -->
        <pathconvert property="project.injars">
            <path location="${out.classes.absolute.dir}" />
            <path location="${scala-library.jar}(!META-INF/MANIFEST.MF,!library.properties)" />
        </pathconvert>
        <split-path property="injars" prefix="-injars" path="${project.injars}" />
        <split-path property="outjars" prefix="-outjars" path="${shrinked.jar}" />
        <!-- set the android classpath object into a single property. -->
        <pathconvert property="project.libraryjars">
            <fileset dir="${jar.libs.dir}" includes="*.jar" />
            <path refid="android.target.classpath" />
        </pathconvert>
        <split-path property="libraryjars" prefix="-libraryjars" path="${project.libraryjars}" />
        <copy file="${template.cfg}" tofile="${shrink-proguard.cfg}">
            <filterchain>
                <replacetokens>
                    <token key="HEADER" value="${header}" />
                    <token key="INJARS" value="${injars}" />
                    <token key="OUTJARS" value="${outjars}" />
                    <token key="LIBRARYJARS" value="${libraryjars}" />
                    <token key="PACKAGENAME" value="${manifest.package}.**" />
                </replacetokens>
            </filterchain>
        </copy>
        <proguard configuration="${shrink-proguard.cfg}" />
    </target>

    <!-- Macros -->

    <macrodef name="generate-header">
        <attribute name="property" />
        <sequential>
            <dirname property="parentdir" file="${basedir}" />
            <pathconvert property="rel.template.cfg">
                <map from="${parentdir}${file.separator}" to="" />
                <path location="${template.cfg}" />
            </pathconvert>
            <property name="@{property}" value="# This file is automatically generated from ${rel.template.cfg}" />
        </sequential>
    </macrodef>

    <!-- split 'path' into several lines starting with 'prefix' and save result in 'property' -->
    <macrodef name="split-path">
        <attribute name="property" />
        <attribute name="prefix" />
        <attribute name="path" />
        <sequential>
            <tempfile property="temp.file" destdir="${out.dir}" deleteonexit="true" />
            <echo message="@{path}" file="${temp.file}" />
            <loadfile srcfile="${temp.file}" property="@{property}.list">
                <filterchain>
                    <replacestring from="${path.separator}" to="${line.separator}"/>
                    <replaceregex pattern="(.*)" replace="@{prefix} \1" />
                </filterchain>
            </loadfile>
            <property name="@{property}" value="${@{property}.list}" />
        </sequential>
    </macrodef>

</project>
